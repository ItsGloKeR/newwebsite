import React, { useState, useEffect, useRef } from 'react';
import { useAdmin } from '../contexts/AdminContext';
import { StreamSource } from '../types';
import { useFocusTrap } from '../hooks/useFocusTrap';

interface AdminModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const AdminModal: React.FC<AdminModalProps> = ({ isOpen, onClose }) => {
  const { isAdmin, login, logout, overrides, localOverrides, updateGlobalStreamUrlTemplate } = useAdmin();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  
  const [vidnestUrl, setVidnestUrl] = useState(overrides.globalStreamUrlTemplates.vidnest || '');
  const [animePaheUrl, setAnimePaheUrl] = useState(overrides.globalStreamUrlTemplates.animepahe || '');
  const [vidlinkUrl, setVidlinkUrl] = useState(overrides.globalStreamUrlTemplates.vidlink || '');
  const [externalPlayerUrl, setExternalPlayerUrl] = useState(overrides.globalStreamUrlTemplates.externalplayer || '');
  const [copyButtonText, setCopyButtonText] = useState('Generate & Copy Code');
  
  const modalRef = useRef<HTMLDivElement>(null);
  useFocusTrap(modalRef, isOpen);

  useEffect(() => {
    if (isOpen) {
        setVidnestUrl(overrides.globalStreamUrlTemplates.vidnest || '');
        setAnimePaheUrl(overrides.globalStreamUrlTemplates.animepahe || '');
        setVidlinkUrl(overrides.globalStreamUrlTemplates.vidlink || '');
        setExternalPlayerUrl(overrides.globalStreamUrlTemplates.externalplayer || '');
    }
  }, [overrides, isOpen]);
  
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };
    if (isOpen) {
      document.addEventListener('keydown', handleKeyDown);
    }
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [isOpen, onClose]);

  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault();
    if (username !== 'itsgloker') {
        setError('Invalid username.');
        return;
    }
    const success = login(password);
    if (!success) {
      setError('Invalid password.');
    } else {
      setError('');
      setPassword('');
    }
  };

  const handleUrlChange = (source: StreamSource, value: string) => {
    if (source === StreamSource.Vidnest) {
      setVidnestUrl(value);
    } else if (source === StreamSource.AnimePahe) {
      setAnimePaheUrl(value);
    } else if (source === StreamSource.Vidlink) {
      setVidlinkUrl(value);
    } else if (source === StreamSource.ExternalPlayer) {
        setExternalPlayerUrl(value);
    }
    updateGlobalStreamUrlTemplate(source, value);
  };

  const generateExportCode = () => {
    const jsonString = JSON.stringify(localOverrides, null, 2);
    return `import { AdminOverrides } from '../types';

// This file was generated by the admin panel.
// To publish your changes, copy this entire file's content
// and replace the content of 'overrides/data.ts'.

export const staticOverrides: AdminOverrides = ${jsonString};
`;
};

const handleCopy = () => {
    navigator.clipboard.writeText(generateExportCode()).then(() => {
        setCopyButtonText('Copied!');
        setTimeout(() => setCopyButtonText('Generate & Copy Code'), 2000);
    }, () => {
        setCopyButtonText('Copy Failed!');
        setTimeout(() => setCopyButtonText('Generate & Copy Code'), 2000);
    });
};
  
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/70 z-50 flex items-center justify-center animate-fade-in" onClick={onClose} role="dialog" aria-modal="true" aria-labelledby="admin-modal-title">
      <div ref={modalRef} className="bg-gray-900 text-white rounded-lg shadow-xl p-8 w-full max-w-md max-h-[90vh] overflow-y-auto" onClick={(e) => e.stopPropagation()}>
        <div className="flex justify-between items-center mb-6">
          <h2 id="admin-modal-title" className="text-2xl font-bold text-cyan-400">Admin Panel</h2>
          <button onClick={onClose} className="text-gray-400 hover:text-white text-3xl leading-none" aria-label="Close admin panel">&times;</button>
        </div>
        
        {!isAdmin ? (
          <form onSubmit={handleLogin}>
            <div className="mb-4">
              <label className="block mb-2 text-sm font-bold text-gray-400" htmlFor="username">Username</label>
              <input
                id="username"
                type="text"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                className="w-full px-3 py-2 bg-gray-800 rounded focus:outline-none focus-ring-2 focus:ring-cyan-500"
                required
              />
            </div>
            <div className="mb-6">
              <label className="block mb-2 text-sm font-bold text-gray-400" htmlFor="password">Password</label>
              <input
                id="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full px-3 py-2 bg-gray-800 rounded focus:outline-none focus-ring-2 focus:ring-cyan-500"
                required
              />
            </div>
            {error && <p className="text-red-500 text-xs italic mb-4">{error}</p>}
            <button type="submit" className="w-full bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-2 px-4 rounded transition-colors">
              Login
            </button>
          </form>
        ) : (
          <div>
            <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-semibold">Admin Dashboard</h3>
                <button onClick={logout} className="bg-gray-700 hover:bg-gray-600 text-white text-sm font-bold py-1 px-3 rounded transition-colors">
                    Logout
                </button>
            </div>

            <div className="mb-6">
                <h4 className="text-lg font-semibold mb-2">Edit Global Stream URL Templates</h4>
                 <p className="text-xs text-gray-400 mb-3">
                    Use <code className="bg-gray-800 text-cyan-300 px-1 rounded">{'{anilistId}'}</code>, <code className="bg-gray-800 text-cyan-300 px-1 rounded">{'{malId}'}</code>, <code className="bg-gray-800 text-cyan-300 px-1 rounded">{'{episode}'}</code>, and <code className="bg-gray-800 text-cyan-300 px-1 rounded">{'{language}'}</code> as tokens in the URL templates.
                </p>
                <div className="mb-4">
                <label className="block mb-2 text-sm font-bold text-gray-400" htmlFor="source1">Global Source 1 Template (AnimePahe)</label>
                <input
                    id="source1"
                    type="text"
                    value={animePaheUrl}
                    onChange={(e) => handleUrlChange(StreamSource.AnimePahe, e.target.value)}
                    placeholder="e.g., https://.../animepahe/{anilistId}/{episode}/{language}"
                    className="w-full px-3 py-2 bg-gray-800 rounded focus:outline-none focus:ring-2 focus:ring-cyan-500"
                />
                </div>
                <div className="mb-4">
                <label className="block mb-2 text-sm font-bold text-gray-400" htmlFor="source2">Global Source 2 Template (Vidnest)</label>
                <input
                    id="source2"
                    type="text"
                    value={vidnestUrl}
                    onChange={(e) => handleUrlChange(StreamSource.Vidnest, e.target.value)}
                    placeholder="e.g., https://.../anime/{anilistId}/{episode}/{language}"
                    className="w-full px-3 py-2 bg-gray-800 rounded focus:outline-none focus:ring-2 focus:ring-cyan-500"
                />
                </div>
            </div>

            <div className="mt-8 pt-6 border-t border-gray-700">
                <h3 className="text-lg font-semibold mb-2 text-yellow-400">Publish Changes for Everyone</h3>
                <p className="text-sm text-gray-400 mb-4">
                    To make your current edits (new titles and URLs) permanent for all users, follow these steps:
                </p>
                <ol className="list-decimal list-inside text-sm text-gray-400 space-y-2 mb-4">
                    <li>Click the "Generate & Copy Code" button below.</li>
                    <li>Open the file <code className="bg-gray-800 text-cyan-300 px-1 rounded">overrides/data.ts</code> in your project.</li>
                    <li>Replace the entire content of that file with the code you copied.</li>
                </ol>
                <textarea 
                    readOnly 
                    className="w-full h-32 bg-gray-800 text-gray-300 font-mono text-xs p-2 rounded resize-none" 
                    value={generateExportCode()}
                />
                <button onClick={handleCopy} className="mt-2 w-full bg-yellow-500 hover:bg-yellow-600 text-black font-bold py-2 px-4 rounded transition-colors">
                    {copyButtonText}
                </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminModal;